{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"hello/","text":"\u4f60\u597d WSGI \u5e94\u7528 \u4e0b\u9762\u6211\u4eec\u5c1d\u8bd5\u521b\u5efa\u4e00\u4e2a\u6700\u5c0f\u5316\u7684 WSGI \u5e94\u7528\u3002 \u4e00\u4e2a WSGI \u5e94\u7528\u662f\u4e00\u4e2a\u53ef\u4ee5\u88ab request \u89e6\u53d1\u7684 python \u53ef\u8c03\u7528\u5bf9\u8c61(\u5b9e\u73b0\u4e86__call__\u9b54\u6cd5\u51fd\u6570\uff0c\u7c7b\u3001\u51fd\u6570\u90fd\u53ef\u4ee5)\uff0c\u8be5\u5bf9\u8c61\u9700\u63a5\u53d7\u4e24\u4e2a\u53c2\u6570\uff0c environ \u548c start_response\u3002 Environ \u662f\u4e00\u4e2a python \u5b57\u5178\uff0c\u5305\u542b\u4e86 CGI \u73af\u5883\u53d8\u91cf \u7684\u4fe1\u606f\u3002start_response \u662f\u4e00\u4e2a\u56de\u8c03\u51fd\u6570\uff0c\u63a5\u53d7\u4e24\u4e2a\u53c2\u6570 status \u548c headers\uff0c\u5bf9\u5e94\u4e86 http \u534f\u8bae\u7684\u72b6\u6001\u7801\u548c http headers\u3002 Environ \u548c start_response \u56de\u8c03\u51fd\u6570\u90fd\u662f\u7531 WSGI \u670d\u52a1\u7aef\u4f20\u9012\u5230\u5e94\u7528\u7aef\u7684\uff0cWSGI \u670d\u52a1\u5668\u51b3\u5b9a\u73af\u5883\u53d8\u91cf\u8be5\u5982\u4f55\u8bbe\u7f6e\uff0cstart_response \u8be5\u600e\u4e48\u5b9e\u73b0\u3002WSGI \u5e94\u7528\u7aef\u4ec5\u4ec5\u662f\u63a5\u53d7\u5b83\u4eec\uff0c\u7136\u540e\u751f\u6210\u72b6\u6001\u7801\u548c headers\uff0c\u6700\u540e\u7ecf\u7531 start_response \u51fd\u6570\u8fd4\u56de\u7ed3\u679c\u3002 def hello_world_app(environ, start_response): status = '200 OK' # HTTP Status # HTTP Headers headers = [('Content-type', 'text/plain; charset=utf-8')] start_response(status, headers) return [b\"Hello World\"] \u8fd0\u884c WSGI \u5e94\u7528 \u4e3a\u4e86\u8fd0\u884c\u4e0a\u9762\u8fd9\u4e2a\u8ff7\u4f60 WSGI \u5e94\u7528\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a WSGI \u670d\u52a1\u5668\uff0c\u5f53\u7136 gunicorn\uff0cuwsgi \u8fd9\u4e9b\u751f\u4ea7\u578b\u670d\u52a1\u5668\u90fd\u662f\u53ef\u4ee5\u6ee1\u8db3\u8981\u6c42\u7684\uff0c\u4f46\u6211\u4eec\u8fd9\u91cc\u4e3a\u4e86\u7b80\u4fbf\uff0c\u4ec5\u4ec5\u4f7f\u7528 python \u6807\u51c6\u5e93\u81ea\u5e26\u7684\u4e00\u4e2a\u7b80\u6613 WSGI \u6d4b\u8bd5\u670d\u52a1\u5668\u3002 from wsgiref.simple_server import make_server def hello_world_app(environ, start_response): status = '200 OK' # HTTP Status # HTTP Headers headers = [('Content-type', 'text/plain; charset=utf-8')] start_response(status, headers) return [b\"Hello World\"] httpd = make_server('', 8000, app) print(\"Serving on port 8000...\") # Serve until process is killed httpd.serve_forever()","title":"Hello WSGI"},{"location":"hello/#wsgi","text":"\u4e0b\u9762\u6211\u4eec\u5c1d\u8bd5\u521b\u5efa\u4e00\u4e2a\u6700\u5c0f\u5316\u7684 WSGI \u5e94\u7528\u3002 \u4e00\u4e2a WSGI \u5e94\u7528\u662f\u4e00\u4e2a\u53ef\u4ee5\u88ab request \u89e6\u53d1\u7684 python \u53ef\u8c03\u7528\u5bf9\u8c61(\u5b9e\u73b0\u4e86__call__\u9b54\u6cd5\u51fd\u6570\uff0c\u7c7b\u3001\u51fd\u6570\u90fd\u53ef\u4ee5)\uff0c\u8be5\u5bf9\u8c61\u9700\u63a5\u53d7\u4e24\u4e2a\u53c2\u6570\uff0c environ \u548c start_response\u3002 Environ \u662f\u4e00\u4e2a python \u5b57\u5178\uff0c\u5305\u542b\u4e86 CGI \u73af\u5883\u53d8\u91cf \u7684\u4fe1\u606f\u3002start_response \u662f\u4e00\u4e2a\u56de\u8c03\u51fd\u6570\uff0c\u63a5\u53d7\u4e24\u4e2a\u53c2\u6570 status \u548c headers\uff0c\u5bf9\u5e94\u4e86 http \u534f\u8bae\u7684\u72b6\u6001\u7801\u548c http headers\u3002 Environ \u548c start_response \u56de\u8c03\u51fd\u6570\u90fd\u662f\u7531 WSGI \u670d\u52a1\u7aef\u4f20\u9012\u5230\u5e94\u7528\u7aef\u7684\uff0cWSGI \u670d\u52a1\u5668\u51b3\u5b9a\u73af\u5883\u53d8\u91cf\u8be5\u5982\u4f55\u8bbe\u7f6e\uff0cstart_response \u8be5\u600e\u4e48\u5b9e\u73b0\u3002WSGI \u5e94\u7528\u7aef\u4ec5\u4ec5\u662f\u63a5\u53d7\u5b83\u4eec\uff0c\u7136\u540e\u751f\u6210\u72b6\u6001\u7801\u548c headers\uff0c\u6700\u540e\u7ecf\u7531 start_response \u51fd\u6570\u8fd4\u56de\u7ed3\u679c\u3002 def hello_world_app(environ, start_response): status = '200 OK' # HTTP Status # HTTP Headers headers = [('Content-type', 'text/plain; charset=utf-8')] start_response(status, headers) return [b\"Hello World\"]","title":"\u4f60\u597d WSGI \u5e94\u7528"},{"location":"hello/#wsgi_1","text":"\u4e3a\u4e86\u8fd0\u884c\u4e0a\u9762\u8fd9\u4e2a\u8ff7\u4f60 WSGI \u5e94\u7528\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a WSGI \u670d\u52a1\u5668\uff0c\u5f53\u7136 gunicorn\uff0cuwsgi \u8fd9\u4e9b\u751f\u4ea7\u578b\u670d\u52a1\u5668\u90fd\u662f\u53ef\u4ee5\u6ee1\u8db3\u8981\u6c42\u7684\uff0c\u4f46\u6211\u4eec\u8fd9\u91cc\u4e3a\u4e86\u7b80\u4fbf\uff0c\u4ec5\u4ec5\u4f7f\u7528 python \u6807\u51c6\u5e93\u81ea\u5e26\u7684\u4e00\u4e2a\u7b80\u6613 WSGI \u6d4b\u8bd5\u670d\u52a1\u5668\u3002 from wsgiref.simple_server import make_server def hello_world_app(environ, start_response): status = '200 OK' # HTTP Status # HTTP Headers headers = [('Content-type', 'text/plain; charset=utf-8')] start_response(status, headers) return [b\"Hello World\"] httpd = make_server('', 8000, app) print(\"Serving on port 8000...\") # Serve until process is killed httpd.serve_forever()","title":"\u8fd0\u884c WSGI \u5e94\u7528"},{"location":"intro/","text":"\u4ecb\u7ecd \u8fd9\u4e2a\u7cfb\u5217\u6587\u7ae0\u4f1a\u5e2e\u52a9\u7406\u89e3\u4e3b\u6d41 python web \u6846\u67b6\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff0c\u6211\u4eec\u4f1a\u56de\u987e WSGI \u7684\u5386\u53f2\u6765\u6e90\uff0c\u534f\u8bae\u6807\u51c6\uff0c\u5e76\u5c1d\u8bd5\u81ea\u5df1\u52a8\u624b\u505a\u4e00\u4e2a WSGI web \u6846\u67b6\u3002","title":"\u4ecb\u7ecd"},{"location":"intro/#_1","text":"\u8fd9\u4e2a\u7cfb\u5217\u6587\u7ae0\u4f1a\u5e2e\u52a9\u7406\u89e3\u4e3b\u6d41 python web \u6846\u67b6\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff0c\u6211\u4eec\u4f1a\u56de\u987e WSGI \u7684\u5386\u53f2\u6765\u6e90\uff0c\u534f\u8bae\u6807\u51c6\uff0c\u5e76\u5c1d\u8bd5\u81ea\u5df1\u52a8\u624b\u505a\u4e00\u4e2a WSGI web \u6846\u67b6\u3002","title":"\u4ecb\u7ecd"},{"location":"middleware/","text":"\u4e2d\u95f4\u4ef6 - Middleware \u5bf9\u4e8e\u670d\u52a1\u7aef\u6765\u8bf4\u4e2d\u95f4\u4ef6\u53ef\u4ee5\u5145\u5f53\u5e94\u7528\uff0c\u54cd\u5e94\u670d\u52a1\u5668\u53d1\u6765\u7684\u8bf7\u6c42\uff1b\u800c\u5bf9\u5e94\u7528\u7aef\u6765\u8bf4\u4e2d\u95f4\u4ef6\u5219\u5145\u5f53\u4e86\u670d\u52a1\u5668\u7684\u89d2\u8272\uff0c\u4e0e\u5e94\u7528\u7aef\u8fdb\u884c\u4ea4\u4e92\u3002\u4e2d\u95f4\u4ef6\u5c31\u50cf\u9910\u5385\u91cc\u7684\u670d\u52a1\u5458\uff0c\u628a\u5927\u9910(\u6570\u636e)\u4ece\u53a8\u5e08(\u670d\u52a1\u5668)\u624b\u4e2d\u63a5\u8fc7\uff0c\u4f20\u9012\u7ed9\u5ba2\u6237(\u5e94\u7528\u7aef)\uff0c\u5ba2\u6237\u5982\u679c\u5bf9\u996d\u83dc\u4e0d\u6ee1\u610f\uff0c\u4f1a\u7ecf\u7531\u670d\u52a1\u5458\u53cd\u9988\u7ed9\u5927\u53a8\u3002 \u4e2d\u95f4\u4ef6\u8fd9\u4e2a\u6982\u5ff5\u5728\u5f88\u591a web \u6846\u67b6\u4e2d\u90fd\u5b58\u5728\uff0c\u8fd9\u4e0e\u7f16\u7a0b\u8bed\u8a00\u65e0\u5173\u3002nodejs \u548c django \u4f1a\u66f4\u52a0\u663e\u5f0f\u7684\u7533\u660e\u4e2d\u95f4\u4ef6\uff0c\u6bd4\u5982\u4e0b\u9762 nodejs \u7684\u4e2d\u95f4\u4ef6\uff0c\u6bcf\u6b21\u5e94\u7528\u7aef\u6536\u5230 request \u90fd\u4f1a\u6253\u5370\u51fa\u5f53\u524d\u65f6\u95f4\u3002 app.use((req, res, next) => { console.log(\"Time:\", Date.now()); next(); }); \u4f5c\u4e3a WSGI \u6846\u67b6\u4e4b\u4e00\u7684 flask \u5219\u7528\u4e86 extension/plugin \u7684\u6982\u5ff5\uff0c\u5e94\u7528\u7aef app \u88ab extension \u5305\u88f9\uff0c\u4ee5\u8fbe\u5230\u4e2d\u95f4\u4ef6\u7684\u76ee\u7684\u3002 \u5f53\u7136\u4e5f\u53ef\u4ee5\u76f4\u63a5\u7528 flask \u7684 before_request, after_request \u53bb\u8fbe\u5230\u540c\u6837\u6548\u679c\u3002 \"\"\" Example how flask uses middleware wrapping around the application \"\"\" from flask import Flask from flask_login import LoginManager app = Flask(__name__) login_manager = LoginManager() login_manager.init_app(app) \u4e0b\u9762\u8fd9\u4e00\u90e8\u5206\u662f flask_login \u91cc init_app \u7684\u4ee3\u7801\uff0c\u4f5c\u7528\u662f\u628a LoginManager \u8fd9\u4e2a\u4e2d\u95f4\u4ef6\u6302\u8f7d\u5728 flask app \u8fd9\u4e2a\u5168\u5c40\u5b9e\u4f8b\u4e0a\uff0c\u540c\u65f6\u5728\u6bcf\u6b21 request \u5faa\u73af\u540e\u89e6\u53d1\u4e00\u4e2a_update_remember_cookie \u7684\u4efb\u52a1\u6765\u66f4\u65b0 cookie\uff0c\u4ee5\u4fdd\u6301\u767b\u5f55\u72b6\u6001\u3002 def init_app(self, app, add_context_processor=True): \"\"\" Configures an application. This registers an `after_request` call, and attaches this `LoginManager` to it as `app.login_manager`. :param app: The :class:`flask.Flask` object to configure. :type app: :class:`flask.Flask` :param add_context_processor: Whether to add a context processor to the app that adds a `current_user` variable to the template. Defaults to ``True``. :type add_context_processor: bool \"\"\" app.login_manager = self app.after_request(self._update_remember_cookie) if add_context_processor: app.context_processor(_user_context_processor) \u7b2c\u4e00\u4e2a WSGI \u4e2d\u95f4\u4ef6 \u6211\u4eec\u6765\u81ea\u5df1\u505a\u4e00\u4e2a WSGI \u4e2d\u95f4\u4ef6\u3002 hello_world_app \u662f\u4e00\u4e2a\u7b80\u5355\u7684 WSGI \u5e94\u7528\uff0c\u5b83\u4f1a\u8fd4\u56de Hello World \u5b57\u7b26\u4e32\uff0c\u5e76\u6dfb\u52a0\u76f8\u5e94\u7684 headers\uff0c\u7ed9\u5ba2\u6237\u7aef\u6d4f\u89c8\u5668\u3002 log_environ \u662f\u6211\u4eec\u505a\u7684\u4e2d\u95f4\u4ef6\uff0c\u91c7\u7528\u95ed\u5305\u548c\u88c5\u9970\u5668\u3002\u5185\u90e8\u7684_inner \u51fd\u6570\u4f1a\u6253\u5370\u51fa WSGI \u670d\u52a1\u7aef(httpd)\u53d1\u6765\u7684 environ \u73af\u5883\u53d8\u91cf, \u6700\u7ec8\u628a\u7531 hello_world_app WSGI \u5e94\u7528\u7aef\u4ea7\u751f\u7684\u7ed3\u679c\u8fd4\u56de\u7ed9\u6d4f\u89c8\u5668\u3002 \u6240\u4ee5\u8fd9\u4e2a\u6d41\u7a0b\u662f\u5148\u7531\u6d4f\u89c8\u5668\u53d1\u9001 get \u8bf7\u6c42\u7ed9 WSGI \u670d\u52a1\u5668\uff0c\u670d\u52a1\u5668\u4f1a\u6574\u7406\u8bf7\u6c42\u7684\u73af\u5883\u53d8\u91cf\u5e76\u628a environ \u548c start_response \u5bf9\u8c61\u6253\u5305\u53d1\u7ed9 WSGI \u4e2d\u95f4\u4ef6\uff0c\u8fd9\u4e2a log_environ \u4e2d\u95f4\u4ef6\u4f1a\u5148\u628a environ \u6253\u5370\u51fa\u6765\uff0c\u7136\u540e\u8c03\u7528 WSGI \u5ba2\u6237\u7aef hello_world_app\uff0c\u5e76\u628a\u5ba2\u6237\u7aef\u7684\u7ed3\u679c Hello World \u8fd4\u56de\u7ed9\u670d\u52a1\u5668\uff0c\u518d\u7531\u670d\u52a1\u5668\u4f20\u56de\u6d4f\u89c8\u5668\uff0c\u6700\u7ec8\u7ed3\u679c\u5728\u6d4f\u89c8\u5668\u4e0a\u5448\u73b0\u3002 \u53ef\u4ee5\u770b\u7684\u51fa log_environ \u5c31\u662f\u88c5\u9970\u5668\uff0c\u76ee\u7684\u662f\u52a0\u5f3a WSGI \u5e94\u7528\u7aef\u539f\u6709\u7684\u529f\u80fd\uff0c\u6240\u4ee5\u5728 hello_world_app \u4e0a\u91c7\u7528\u88c5\u9970\u5668\u8bed\u6cd5 @log_environ \u4e5f\u662f\u80fd\u6b63\u5e38\u5de5\u4f5c\u7684\u3002 \u5199\u6cd5\u4e00 from wsgiref.simple_server import make_server def hello_world_app(environ, start_response): status = '200 OK' # HTTP Status # HTTP Headers headers = [('Content-type', 'text/plain; charset=utf-8')] start_response(status, headers) # The returned object is going to be printed return [b\"Hello World\"] def log_environ(handler): \"\"\"print the envrionment dictionary to the console\"\"\" from pprint import pprint def _inner(environ, start_function): pprint(environ) return handler(environ, start_function) return _inner # this will show \"Hello World!\" in your browser, # and the environment in the console app = log_environ(hello_world_app) httpd = make_server('', 8000, app) print(\"Serving on port 8000...\") # Serve until process is killed httpd.serve_forever() \u5199\u6cd5 2 from wsgiref.simple_server import make_server def log_environ(handler): \"\"\"print the envrionment dictionary to the console\"\"\" from pprint import pprint def _inner(environ, start_function): pprint(environ) return handler(environ, start_function) return _inner @log_environ def hello_world_app(environ, start_response): status = '200 OK' # HTTP Status # HTTP Headers headers = [('Content-type', 'text/plain; charset=utf-8')] start_response(status, headers) # The returned object is going to be printed return [b\"Hello World\"] httpd = make_server('', 8001, hello_world_app) print(\"Serving on port 8001...\") # Serve until process is killed httpd.serve_forever()","title":"WSGI\u4e2d\u95f4\u4ef6"},{"location":"middleware/#-middleware","text":"\u5bf9\u4e8e\u670d\u52a1\u7aef\u6765\u8bf4\u4e2d\u95f4\u4ef6\u53ef\u4ee5\u5145\u5f53\u5e94\u7528\uff0c\u54cd\u5e94\u670d\u52a1\u5668\u53d1\u6765\u7684\u8bf7\u6c42\uff1b\u800c\u5bf9\u5e94\u7528\u7aef\u6765\u8bf4\u4e2d\u95f4\u4ef6\u5219\u5145\u5f53\u4e86\u670d\u52a1\u5668\u7684\u89d2\u8272\uff0c\u4e0e\u5e94\u7528\u7aef\u8fdb\u884c\u4ea4\u4e92\u3002\u4e2d\u95f4\u4ef6\u5c31\u50cf\u9910\u5385\u91cc\u7684\u670d\u52a1\u5458\uff0c\u628a\u5927\u9910(\u6570\u636e)\u4ece\u53a8\u5e08(\u670d\u52a1\u5668)\u624b\u4e2d\u63a5\u8fc7\uff0c\u4f20\u9012\u7ed9\u5ba2\u6237(\u5e94\u7528\u7aef)\uff0c\u5ba2\u6237\u5982\u679c\u5bf9\u996d\u83dc\u4e0d\u6ee1\u610f\uff0c\u4f1a\u7ecf\u7531\u670d\u52a1\u5458\u53cd\u9988\u7ed9\u5927\u53a8\u3002 \u4e2d\u95f4\u4ef6\u8fd9\u4e2a\u6982\u5ff5\u5728\u5f88\u591a web \u6846\u67b6\u4e2d\u90fd\u5b58\u5728\uff0c\u8fd9\u4e0e\u7f16\u7a0b\u8bed\u8a00\u65e0\u5173\u3002nodejs \u548c django \u4f1a\u66f4\u52a0\u663e\u5f0f\u7684\u7533\u660e\u4e2d\u95f4\u4ef6\uff0c\u6bd4\u5982\u4e0b\u9762 nodejs \u7684\u4e2d\u95f4\u4ef6\uff0c\u6bcf\u6b21\u5e94\u7528\u7aef\u6536\u5230 request \u90fd\u4f1a\u6253\u5370\u51fa\u5f53\u524d\u65f6\u95f4\u3002 app.use((req, res, next) => { console.log(\"Time:\", Date.now()); next(); }); \u4f5c\u4e3a WSGI \u6846\u67b6\u4e4b\u4e00\u7684 flask \u5219\u7528\u4e86 extension/plugin \u7684\u6982\u5ff5\uff0c\u5e94\u7528\u7aef app \u88ab extension \u5305\u88f9\uff0c\u4ee5\u8fbe\u5230\u4e2d\u95f4\u4ef6\u7684\u76ee\u7684\u3002 \u5f53\u7136\u4e5f\u53ef\u4ee5\u76f4\u63a5\u7528 flask \u7684 before_request, after_request \u53bb\u8fbe\u5230\u540c\u6837\u6548\u679c\u3002 \"\"\" Example how flask uses middleware wrapping around the application \"\"\" from flask import Flask from flask_login import LoginManager app = Flask(__name__) login_manager = LoginManager() login_manager.init_app(app) \u4e0b\u9762\u8fd9\u4e00\u90e8\u5206\u662f flask_login \u91cc init_app \u7684\u4ee3\u7801\uff0c\u4f5c\u7528\u662f\u628a LoginManager \u8fd9\u4e2a\u4e2d\u95f4\u4ef6\u6302\u8f7d\u5728 flask app \u8fd9\u4e2a\u5168\u5c40\u5b9e\u4f8b\u4e0a\uff0c\u540c\u65f6\u5728\u6bcf\u6b21 request \u5faa\u73af\u540e\u89e6\u53d1\u4e00\u4e2a_update_remember_cookie \u7684\u4efb\u52a1\u6765\u66f4\u65b0 cookie\uff0c\u4ee5\u4fdd\u6301\u767b\u5f55\u72b6\u6001\u3002 def init_app(self, app, add_context_processor=True): \"\"\" Configures an application. This registers an `after_request` call, and attaches this `LoginManager` to it as `app.login_manager`. :param app: The :class:`flask.Flask` object to configure. :type app: :class:`flask.Flask` :param add_context_processor: Whether to add a context processor to the app that adds a `current_user` variable to the template. Defaults to ``True``. :type add_context_processor: bool \"\"\" app.login_manager = self app.after_request(self._update_remember_cookie) if add_context_processor: app.context_processor(_user_context_processor)","title":"\u4e2d\u95f4\u4ef6 - Middleware"},{"location":"middleware/#wsgi","text":"\u6211\u4eec\u6765\u81ea\u5df1\u505a\u4e00\u4e2a WSGI \u4e2d\u95f4\u4ef6\u3002 hello_world_app \u662f\u4e00\u4e2a\u7b80\u5355\u7684 WSGI \u5e94\u7528\uff0c\u5b83\u4f1a\u8fd4\u56de Hello World \u5b57\u7b26\u4e32\uff0c\u5e76\u6dfb\u52a0\u76f8\u5e94\u7684 headers\uff0c\u7ed9\u5ba2\u6237\u7aef\u6d4f\u89c8\u5668\u3002 log_environ \u662f\u6211\u4eec\u505a\u7684\u4e2d\u95f4\u4ef6\uff0c\u91c7\u7528\u95ed\u5305\u548c\u88c5\u9970\u5668\u3002\u5185\u90e8\u7684_inner \u51fd\u6570\u4f1a\u6253\u5370\u51fa WSGI \u670d\u52a1\u7aef(httpd)\u53d1\u6765\u7684 environ \u73af\u5883\u53d8\u91cf, \u6700\u7ec8\u628a\u7531 hello_world_app WSGI \u5e94\u7528\u7aef\u4ea7\u751f\u7684\u7ed3\u679c\u8fd4\u56de\u7ed9\u6d4f\u89c8\u5668\u3002 \u6240\u4ee5\u8fd9\u4e2a\u6d41\u7a0b\u662f\u5148\u7531\u6d4f\u89c8\u5668\u53d1\u9001 get \u8bf7\u6c42\u7ed9 WSGI \u670d\u52a1\u5668\uff0c\u670d\u52a1\u5668\u4f1a\u6574\u7406\u8bf7\u6c42\u7684\u73af\u5883\u53d8\u91cf\u5e76\u628a environ \u548c start_response \u5bf9\u8c61\u6253\u5305\u53d1\u7ed9 WSGI \u4e2d\u95f4\u4ef6\uff0c\u8fd9\u4e2a log_environ \u4e2d\u95f4\u4ef6\u4f1a\u5148\u628a environ \u6253\u5370\u51fa\u6765\uff0c\u7136\u540e\u8c03\u7528 WSGI \u5ba2\u6237\u7aef hello_world_app\uff0c\u5e76\u628a\u5ba2\u6237\u7aef\u7684\u7ed3\u679c Hello World \u8fd4\u56de\u7ed9\u670d\u52a1\u5668\uff0c\u518d\u7531\u670d\u52a1\u5668\u4f20\u56de\u6d4f\u89c8\u5668\uff0c\u6700\u7ec8\u7ed3\u679c\u5728\u6d4f\u89c8\u5668\u4e0a\u5448\u73b0\u3002 \u53ef\u4ee5\u770b\u7684\u51fa log_environ \u5c31\u662f\u88c5\u9970\u5668\uff0c\u76ee\u7684\u662f\u52a0\u5f3a WSGI \u5e94\u7528\u7aef\u539f\u6709\u7684\u529f\u80fd\uff0c\u6240\u4ee5\u5728 hello_world_app \u4e0a\u91c7\u7528\u88c5\u9970\u5668\u8bed\u6cd5 @log_environ \u4e5f\u662f\u80fd\u6b63\u5e38\u5de5\u4f5c\u7684\u3002 \u5199\u6cd5\u4e00 from wsgiref.simple_server import make_server def hello_world_app(environ, start_response): status = '200 OK' # HTTP Status # HTTP Headers headers = [('Content-type', 'text/plain; charset=utf-8')] start_response(status, headers) # The returned object is going to be printed return [b\"Hello World\"] def log_environ(handler): \"\"\"print the envrionment dictionary to the console\"\"\" from pprint import pprint def _inner(environ, start_function): pprint(environ) return handler(environ, start_function) return _inner # this will show \"Hello World!\" in your browser, # and the environment in the console app = log_environ(hello_world_app) httpd = make_server('', 8000, app) print(\"Serving on port 8000...\") # Serve until process is killed httpd.serve_forever() \u5199\u6cd5 2 from wsgiref.simple_server import make_server def log_environ(handler): \"\"\"print the envrionment dictionary to the console\"\"\" from pprint import pprint def _inner(environ, start_function): pprint(environ) return handler(environ, start_function) return _inner @log_environ def hello_world_app(environ, start_response): status = '200 OK' # HTTP Status # HTTP Headers headers = [('Content-type', 'text/plain; charset=utf-8')] start_response(status, headers) # The returned object is going to be printed return [b\"Hello World\"] httpd = make_server('', 8001, hello_world_app) print(\"Serving on port 8001...\") # Serve until process is killed httpd.serve_forever()","title":"\u7b2c\u4e00\u4e2a WSGI \u4e2d\u95f4\u4ef6"},{"location":"next/","text":"\u4e0b\u4e00\u6b65 \u6700\u597d\u80fd\u770b\u4e00\u4e0b wsgi \u6846\u67b6\u7684\u6e90\u4ee3\u7801\uff0c\u6bd4\u8f83\u63a8\u8350\u7684\u662f flask \u548c bottle\uff0c\u8fd9\u4e24\u8005\u7684\u6e90\u4ee3\u7801\uff08\u5c24\u5176\u662f\u539f\u59cb\u7248\u672c\uff09\u90fd\u975e\u5e38\u7cbe\u5de7\uff0c\u53ef\u4ee5\u6253\u5f00 0.1 \u7248\u672c\u7684\u4ee3\u7801\u770b\u770b\u3002flask \u56e0\u4e3a\u8fd8\u6709\u4f9d\u8d56\u6846\u67b6 werkzeug\uff0c\u5f88\u591a http \u5904\u7406\u5b9e\u9645\u4e0a\u90fd\u662f\u5728 werkzeug \u91cc\u7684\uff0c\u65b0\u624b\u53ef\u4ee5\u4ece bottle \u5f00\u59cb\uff0cbottle \u6240\u6709\u4ee3\u7801\u4f9d\u8d56\u90fd\u662f\u5728\u4e00\u4e2a\u6587\u4ef6\u91cc\u3002 \u4e0b\u4e00\u6b65\u4f1a\u5199\u4e00\u4e2a bottle \u6e90\u4ee3\u7801\u7684\u521d\u5b66\u8005\u6559\u7a0b\uff0cstay tuned.","title":"\u4e0b\u4e00\u6b65"},{"location":"next/#_1","text":"\u6700\u597d\u80fd\u770b\u4e00\u4e0b wsgi \u6846\u67b6\u7684\u6e90\u4ee3\u7801\uff0c\u6bd4\u8f83\u63a8\u8350\u7684\u662f flask \u548c bottle\uff0c\u8fd9\u4e24\u8005\u7684\u6e90\u4ee3\u7801\uff08\u5c24\u5176\u662f\u539f\u59cb\u7248\u672c\uff09\u90fd\u975e\u5e38\u7cbe\u5de7\uff0c\u53ef\u4ee5\u6253\u5f00 0.1 \u7248\u672c\u7684\u4ee3\u7801\u770b\u770b\u3002flask \u56e0\u4e3a\u8fd8\u6709\u4f9d\u8d56\u6846\u67b6 werkzeug\uff0c\u5f88\u591a http \u5904\u7406\u5b9e\u9645\u4e0a\u90fd\u662f\u5728 werkzeug \u91cc\u7684\uff0c\u65b0\u624b\u53ef\u4ee5\u4ece bottle \u5f00\u59cb\uff0cbottle \u6240\u6709\u4ee3\u7801\u4f9d\u8d56\u90fd\u662f\u5728\u4e00\u4e2a\u6587\u4ef6\u91cc\u3002 \u4e0b\u4e00\u6b65\u4f1a\u5199\u4e00\u4e2a bottle \u6e90\u4ee3\u7801\u7684\u521d\u5b66\u8005\u6559\u7a0b\uff0cstay tuned.","title":"\u4e0b\u4e00\u6b65"},{"location":"python_web/","text":"Python web \u6846\u67b6 2000 \u5e74\u540e python web \u5e94\u7528\u6846\u67b6\u9010\u6e10\u6d8c\u73b0\uff0c\u5f53\u65f6\u6bd4\u8f83\u6d41\u884c\u7684 web \u5e94\u7528\u6846\u67b6\u6709 twisted, Zope \u7b49\u7b49\u3002\u8fd9\u4e9b\u6846\u67b6\u5e76\u6ca1\u6709\u7edf\u4e00\u7684\u6807\u51c6\uff0c\u5bfc\u81f4 web \u670d\u52a1\u5668\u8981\u505a\u4e0d\u540c\u7684\u9002\u914d\u624d\u80fd\u63a5\u5165\u8fd9\u4e9b\u6846\u67b6\uff0c\u7e41\u7410\u7684\u914d\u7f6e\u9650\u5236\u4e86 python web \u5f00\u53d1\u7684\u53d1\u5c55\uff0c\u901a\u5e38\u60c5\u51b5\u4e0b\u8fd9\u4e9b web \u6846\u67b6\u53ea\u80fd\u5728 CGI\uff0cFASTCGI\uff0cmod_python \u4e4b\u95f4\u505a\u53d6\u820d\u3002 WSGI WSGI (Web Server Gateway Interface) \u662f\u4f5c\u4e3a Web \u670d\u52a1\u5668\u4e0e Web \u5e94\u7528\u7a0b\u5e8f\u6216\u5e94\u7528\u6846\u67b6\u4e4b\u95f4\u7684\u4e00\u79cd\u63a5\u53e3\uff0c\u4ee5\u63d0\u5347 python web \u5f00\u53d1\u7684\u53ef\u79fb\u690d\u6027\u3002 WSGI \u534f\u8bae\u88ab\u5b9a\u4e49\u5728 PEP333 \u5f53\u4e2d\uff0c\u6709\u5174\u8da3\u7684\u5c0f\u4f19\u4f34\u53ef\u4ee5\u8be6\u7ec6\u9605\u8bfb\u3002 WSGI \u589e\u5f3a\u4e86 python \u5e94\u7528\u7a0b\u5e8f\u7684\u62d3\u5c55\u6027\u548c\u7075\u6d3b\u6027\uff0c\u7528\u6237\u53ef\u4ee5\u81ea\u7531\u7ec4\u5408\u4e0b\u9762\u4efb\u610f\u7684 wsgi server \u548c wsgi framework \u4ee5\u5efa\u7acb web \u5e94\u7528\u3002 WSGI \u670d\u52a1\u7aef\u548c WSGI \u5e94\u7528\u7aef WSGI \u63a5\u53e3\u6709\u670d\u52a1\u7aef\u548c\u5e94\u7528\u7aef\u4e24\u90e8\u5206\uff0c\u670d\u52a1\u7aef\u4e5f\u53ef\u4ee5\u53eb\u7f51\u5173\u7aef\uff0c\u5e94\u7528\u7aef\u4e5f\u53eb\u6846\u67b6\u7aef\u3002\u670d\u52a1\u7aef\u8c03\u7528\u4e00\u4e2a\u7531\u5e94\u7528\u7aef\u63d0\u4f9b\u7684\u53ef\u8c03\u7528\u5bf9\u8c61\u3002\u5982\u4f55\u63d0\u4f9b\u8fd9\u4e2a\u5bf9\u8c61\uff0c\u7531\u670d\u52a1\u7aef\u51b3\u5b9a\u3002\u4f8b\u5982\u67d0\u4e9b\u670d\u52a1\u5668\u6216\u8005\u7f51\u5173\u9700\u8981\u5e94\u7528\u7684\u90e8\u7f72\u8005\u5199\u4e00\u6bb5\u811a\u672c\uff0c\u4ee5\u521b\u5efa\u670d\u52a1\u5668\u6216\u8005\u7f51\u5173\u7684\u5b9e\u4f8b\uff0c\u5e76\u4e14\u4e3a\u8fd9\u4e2a\u5b9e\u4f8b\u63d0\u4f9b\u4e00\u4e2a\u5e94\u7528\u5b9e\u4f8b\u3002\u53e6\u4e00\u4e9b\u670d\u52a1\u5668\u6216\u8005\u7f51\u5173\u5219\u53ef\u80fd\u4f7f\u7528\u914d\u7f6e\u6587\u4ef6\u6216\u5176\u4ed6\u65b9\u6cd5\u4ee5\u6307\u5b9a\u5e94\u7528\u5b9e\u4f8b\u5e94\u8be5\u4ece\u54ea\u91cc\u5bfc\u5165\u6216\u83b7\u53d6\u3002 WSGI Servers WSGI Frameworks","title":"Python Web"},{"location":"python_web/#python-web","text":"2000 \u5e74\u540e python web \u5e94\u7528\u6846\u67b6\u9010\u6e10\u6d8c\u73b0\uff0c\u5f53\u65f6\u6bd4\u8f83\u6d41\u884c\u7684 web \u5e94\u7528\u6846\u67b6\u6709 twisted, Zope \u7b49\u7b49\u3002\u8fd9\u4e9b\u6846\u67b6\u5e76\u6ca1\u6709\u7edf\u4e00\u7684\u6807\u51c6\uff0c\u5bfc\u81f4 web \u670d\u52a1\u5668\u8981\u505a\u4e0d\u540c\u7684\u9002\u914d\u624d\u80fd\u63a5\u5165\u8fd9\u4e9b\u6846\u67b6\uff0c\u7e41\u7410\u7684\u914d\u7f6e\u9650\u5236\u4e86 python web \u5f00\u53d1\u7684\u53d1\u5c55\uff0c\u901a\u5e38\u60c5\u51b5\u4e0b\u8fd9\u4e9b web \u6846\u67b6\u53ea\u80fd\u5728 CGI\uff0cFASTCGI\uff0cmod_python \u4e4b\u95f4\u505a\u53d6\u820d\u3002","title":"Python web \u6846\u67b6"},{"location":"python_web/#wsgi","text":"WSGI (Web Server Gateway Interface) \u662f\u4f5c\u4e3a Web \u670d\u52a1\u5668\u4e0e Web \u5e94\u7528\u7a0b\u5e8f\u6216\u5e94\u7528\u6846\u67b6\u4e4b\u95f4\u7684\u4e00\u79cd\u63a5\u53e3\uff0c\u4ee5\u63d0\u5347 python web \u5f00\u53d1\u7684\u53ef\u79fb\u690d\u6027\u3002 WSGI \u534f\u8bae\u88ab\u5b9a\u4e49\u5728 PEP333 \u5f53\u4e2d\uff0c\u6709\u5174\u8da3\u7684\u5c0f\u4f19\u4f34\u53ef\u4ee5\u8be6\u7ec6\u9605\u8bfb\u3002 WSGI \u589e\u5f3a\u4e86 python \u5e94\u7528\u7a0b\u5e8f\u7684\u62d3\u5c55\u6027\u548c\u7075\u6d3b\u6027\uff0c\u7528\u6237\u53ef\u4ee5\u81ea\u7531\u7ec4\u5408\u4e0b\u9762\u4efb\u610f\u7684 wsgi server \u548c wsgi framework \u4ee5\u5efa\u7acb web \u5e94\u7528\u3002","title":"WSGI"},{"location":"python_web/#wsgi-wsgi","text":"WSGI \u63a5\u53e3\u6709\u670d\u52a1\u7aef\u548c\u5e94\u7528\u7aef\u4e24\u90e8\u5206\uff0c\u670d\u52a1\u7aef\u4e5f\u53ef\u4ee5\u53eb\u7f51\u5173\u7aef\uff0c\u5e94\u7528\u7aef\u4e5f\u53eb\u6846\u67b6\u7aef\u3002\u670d\u52a1\u7aef\u8c03\u7528\u4e00\u4e2a\u7531\u5e94\u7528\u7aef\u63d0\u4f9b\u7684\u53ef\u8c03\u7528\u5bf9\u8c61\u3002\u5982\u4f55\u63d0\u4f9b\u8fd9\u4e2a\u5bf9\u8c61\uff0c\u7531\u670d\u52a1\u7aef\u51b3\u5b9a\u3002\u4f8b\u5982\u67d0\u4e9b\u670d\u52a1\u5668\u6216\u8005\u7f51\u5173\u9700\u8981\u5e94\u7528\u7684\u90e8\u7f72\u8005\u5199\u4e00\u6bb5\u811a\u672c\uff0c\u4ee5\u521b\u5efa\u670d\u52a1\u5668\u6216\u8005\u7f51\u5173\u7684\u5b9e\u4f8b\uff0c\u5e76\u4e14\u4e3a\u8fd9\u4e2a\u5b9e\u4f8b\u63d0\u4f9b\u4e00\u4e2a\u5e94\u7528\u5b9e\u4f8b\u3002\u53e6\u4e00\u4e9b\u670d\u52a1\u5668\u6216\u8005\u7f51\u5173\u5219\u53ef\u80fd\u4f7f\u7528\u914d\u7f6e\u6587\u4ef6\u6216\u5176\u4ed6\u65b9\u6cd5\u4ee5\u6307\u5b9a\u5e94\u7528\u5b9e\u4f8b\u5e94\u8be5\u4ece\u54ea\u91cc\u5bfc\u5165\u6216\u83b7\u53d6\u3002","title":"WSGI \u670d\u52a1\u7aef\u548c WSGI \u5e94\u7528\u7aef"},{"location":"python_web/#wsgi-servers","text":"","title":"WSGI Servers"},{"location":"python_web/#wsgi-frameworks","text":"","title":"WSGI Frameworks"},{"location":"reference/","text":"Reference PEP 333 PEP 333 \u4e2d\u6587\u7ffb\u8bd1","title":"Reference"},{"location":"reference/#reference","text":"PEP 333 PEP 333 \u4e2d\u6587\u7ffb\u8bd1","title":"Reference"},{"location":"route/","text":"\u8def\u7531 \u8def\u7531\u662f web \u6846\u67b6\u6700\u6838\u5fc3\u7684\u529f\u80fd\u4e4b\u4e00\uff0c\u53e6\u5916\u4e00\u4e2a\u662f request->response \u5904\u7406\uff0c\u8def\u7531\u5141\u8bb8\u6d4f\u89c8\u5668\u8c03\u7528\u670d\u52a1\u7aef\u4ee3\u7801\u4e2d\u7684\u4e0d\u540c\u90e8\u5206\u3002 PATH_INFO WSGI \u670d\u52a1\u7aef\u628a\u6d4f\u89c8\u5668\u7d22\u8981\u7684\u8def\u5f84\u4fe1\u606f\u8bb0\u5f55\u5728\u4e86 PATH_INFO \u8fd9\u4e2a\u53d8\u91cf\u4e2d\u5e76\u542c\u8fc7 environ \u4f20\u9012\u7ed9 WSGI \u5e94\u7528\u7aef\u3002 \u4e0b\u9762\u7684\u4f2a\u4ee3\u7801\u901a\u8fc7\u65e0\u9650\u7684 if else \u5d4c\u5957\u628a\u6240\u6709\u9700\u8981\u5904\u7406\u7684\u903b\u8f91\u8fd4\u56de\u7ed9\u6d4f\u89c8\u5668\u3002 def giant_wsgi_case_app(environ, start_response): status = '200 OK' # HTTP Status # HTTP Headers headers = [('Content-type', 'text/plain; charset=utf-8')] start_response(status, headers) # The returned object is going to be printed if environ['PATH_INFO'] == '/hello': return [b\"Hello World\"] elif environ['PATH_INFO'] == '/bye': return [b\"Good bye\"] elif ... ... else: start_response('404 Not Found', headers) return [b\"Not found\"] \u8fd9\u662f\u6700\u539f\u59cb\u7684\u8def\u7531\u5904\u7406\u65b9\u6cd5\uff0c\u5f53\u7136\u51e0\u4e4e\u6ca1\u6709\u4efb\u4f55 web \u6846\u67b6\u4f1a\u771f\u7684\u8fd9\u4e48\u5904\u7406\u8def\u7531\u3002 WSGI \u6846\u67b6\u8def\u7531 \u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a python \u5b57\u5178\u53bb\u4ee3\u66ff\u7e41\u7410\u7684 if else\uff0c\u8bb8\u591a wsgi \u6846\u67b6\u4f1a\u6709\u4e00\u4e2a\u7c7b\u4f3c\u5b57\u5178\u7684 Mapping \u7c7b\u578b\u3002\u6bd4\u5982 django \u53ef\u4ee5\u628a\u8def\u7531\u8868\u653e\u5728 urls.py \u4e2d\uff0c\u5e76\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u548c\u53ef\u8c03\u7528\u7684 view \u505a\u5339\u914d\u53bb\u54cd\u5e94\u6d4f\u89c8\u5668\u7684\u8bf7\u6c42\u3002 from django.conf.urls import url from . import views app_name = 'polls' urlpatterns = [ url(r'^$', views.IndexView.as_view(), name='index'), url(r'^(?P<pk>\\d+)/$', views.DetailView.as_view(), name='detail'), ... ] \u53e6\u4e00\u4e2a wsgi \u6846\u67b6 pyramid \u91c7\u7528\u4e86\u7c7b\u4f3c\u7684\u65b9\u6cd5\u3002 with Configurator() as config: config.add_route('hello', '/hello/{name}') config.add_view(hello_world, route_name='hello') app = config.make_wsgi_app() add_route \u628a route_name \u548c\u8def\u7531\u7684\u8def\u5f84\u6a21\u5f0f\u8054\u7cfb\u5728\u4e00\u8d77\uff0cadd_view \u628a\u4e1a\u52a1\u5904\u7406\u51fd\u6570(hello_world)\u548c route_name \u8054\u7cfb\u5728\u4e00\u8d77\u3002\u8fd9\u6837\u5f53\u6d4f\u89c8\u5668\u8bbf\u95ee/hello/{name}\u8def\u5f84\u662f hello_world \u51fd\u6570\u5c31\u4f1a\u88ab\u89e6\u53d1\u3002 flask \u548c bottle \u7533\u660e\u8def\u7531\u7684\u65b9\u5f0f\u76f8\u6bd4\u5c31\u4e0d\u5927\u4e00\u6837, flask \u9996\u5148\u521b\u9020\u4e86\u901a\u8fc7\u88c5\u9970\u5668\u7533\u660e\u8def\u7531\u7684\u65b9\u5f0f\u3002\u4e0b\u9762\u7684\u4ee3\u7801\u76f4\u63a5\u628a\u8def\u7531\u8def\u5f84\u201c/\u201d\u548c\u5904\u7406\u51fd\u6570 hello \u8054\u7cfb\u5728\u4e86\u4e00\u8d77\uff0c\u5f53\u6d4f\u89c8\u5668\u8bbf\u95ee\u201c/\u201d\u8def\u5f84\u65f6 hello \u51fd\u6570\u4f1a\u88ab\u76f4\u63a5\u8c03\u7528\u3002 from flask import Flask app = Flask(__name__) @app.route(\"/\") def hello(): return \"Hello World!\"","title":"\u8def\u7531"},{"location":"route/#_1","text":"\u8def\u7531\u662f web \u6846\u67b6\u6700\u6838\u5fc3\u7684\u529f\u80fd\u4e4b\u4e00\uff0c\u53e6\u5916\u4e00\u4e2a\u662f request->response \u5904\u7406\uff0c\u8def\u7531\u5141\u8bb8\u6d4f\u89c8\u5668\u8c03\u7528\u670d\u52a1\u7aef\u4ee3\u7801\u4e2d\u7684\u4e0d\u540c\u90e8\u5206\u3002","title":"\u8def\u7531"},{"location":"route/#path_info","text":"WSGI \u670d\u52a1\u7aef\u628a\u6d4f\u89c8\u5668\u7d22\u8981\u7684\u8def\u5f84\u4fe1\u606f\u8bb0\u5f55\u5728\u4e86 PATH_INFO \u8fd9\u4e2a\u53d8\u91cf\u4e2d\u5e76\u542c\u8fc7 environ \u4f20\u9012\u7ed9 WSGI \u5e94\u7528\u7aef\u3002 \u4e0b\u9762\u7684\u4f2a\u4ee3\u7801\u901a\u8fc7\u65e0\u9650\u7684 if else \u5d4c\u5957\u628a\u6240\u6709\u9700\u8981\u5904\u7406\u7684\u903b\u8f91\u8fd4\u56de\u7ed9\u6d4f\u89c8\u5668\u3002 def giant_wsgi_case_app(environ, start_response): status = '200 OK' # HTTP Status # HTTP Headers headers = [('Content-type', 'text/plain; charset=utf-8')] start_response(status, headers) # The returned object is going to be printed if environ['PATH_INFO'] == '/hello': return [b\"Hello World\"] elif environ['PATH_INFO'] == '/bye': return [b\"Good bye\"] elif ... ... else: start_response('404 Not Found', headers) return [b\"Not found\"] \u8fd9\u662f\u6700\u539f\u59cb\u7684\u8def\u7531\u5904\u7406\u65b9\u6cd5\uff0c\u5f53\u7136\u51e0\u4e4e\u6ca1\u6709\u4efb\u4f55 web \u6846\u67b6\u4f1a\u771f\u7684\u8fd9\u4e48\u5904\u7406\u8def\u7531\u3002","title":"PATH_INFO"},{"location":"route/#wsgi","text":"\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a python \u5b57\u5178\u53bb\u4ee3\u66ff\u7e41\u7410\u7684 if else\uff0c\u8bb8\u591a wsgi \u6846\u67b6\u4f1a\u6709\u4e00\u4e2a\u7c7b\u4f3c\u5b57\u5178\u7684 Mapping \u7c7b\u578b\u3002\u6bd4\u5982 django \u53ef\u4ee5\u628a\u8def\u7531\u8868\u653e\u5728 urls.py \u4e2d\uff0c\u5e76\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u548c\u53ef\u8c03\u7528\u7684 view \u505a\u5339\u914d\u53bb\u54cd\u5e94\u6d4f\u89c8\u5668\u7684\u8bf7\u6c42\u3002 from django.conf.urls import url from . import views app_name = 'polls' urlpatterns = [ url(r'^$', views.IndexView.as_view(), name='index'), url(r'^(?P<pk>\\d+)/$', views.DetailView.as_view(), name='detail'), ... ] \u53e6\u4e00\u4e2a wsgi \u6846\u67b6 pyramid \u91c7\u7528\u4e86\u7c7b\u4f3c\u7684\u65b9\u6cd5\u3002 with Configurator() as config: config.add_route('hello', '/hello/{name}') config.add_view(hello_world, route_name='hello') app = config.make_wsgi_app() add_route \u628a route_name \u548c\u8def\u7531\u7684\u8def\u5f84\u6a21\u5f0f\u8054\u7cfb\u5728\u4e00\u8d77\uff0cadd_view \u628a\u4e1a\u52a1\u5904\u7406\u51fd\u6570(hello_world)\u548c route_name \u8054\u7cfb\u5728\u4e00\u8d77\u3002\u8fd9\u6837\u5f53\u6d4f\u89c8\u5668\u8bbf\u95ee/hello/{name}\u8def\u5f84\u662f hello_world \u51fd\u6570\u5c31\u4f1a\u88ab\u89e6\u53d1\u3002 flask \u548c bottle \u7533\u660e\u8def\u7531\u7684\u65b9\u5f0f\u76f8\u6bd4\u5c31\u4e0d\u5927\u4e00\u6837, flask \u9996\u5148\u521b\u9020\u4e86\u901a\u8fc7\u88c5\u9970\u5668\u7533\u660e\u8def\u7531\u7684\u65b9\u5f0f\u3002\u4e0b\u9762\u7684\u4ee3\u7801\u76f4\u63a5\u628a\u8def\u7531\u8def\u5f84\u201c/\u201d\u548c\u5904\u7406\u51fd\u6570 hello \u8054\u7cfb\u5728\u4e86\u4e00\u8d77\uff0c\u5f53\u6d4f\u89c8\u5668\u8bbf\u95ee\u201c/\u201d\u8def\u5f84\u65f6 hello \u51fd\u6570\u4f1a\u88ab\u76f4\u63a5\u8c03\u7528\u3002 from flask import Flask app = Flask(__name__) @app.route(\"/\") def hello(): return \"Hello World!\"","title":"WSGI \u6846\u67b6\u8def\u7531"},{"location":"wsgi/","text":"\u6846\u67b6 \u6210\u719f\u7684 web \u6846\u67b6\u8fd8\u9700\u8981\u4e0b\u9762\u51e0\u90e8\u5206\u3002 1 \u5bf9 environ \u505a\u4e00\u4e9b\u9884\u5904\u7406\uff0c\u628a request \u66b4\u9732\u51fa\u6765\u4f9b\u5e94\u7528\u5f00\u53d1\u8005\u8c03\u7528\u3002\u5728\u4e00\u90e8\u5206 wsgi \u6846\u67b6\u4e2d request \u88ab\u76f4\u63a5\u6ce8\u5165\u5230\u8def\u7531\u51fd\u6570\u5f53\u4e2d\u3002 from django.http import HttpResponse def index(request): return HttpResponse(\"Hello, world.\") \u800c\u50cf flask \u548c bottle \u7c7b\u4f3c\u7684\u6846\u67b6\uff0crequest \u662f\u4e00\u4e2a\u7ebf\u7a0b\u5b89\u5168\u7684\u5168\u5c40\u53d8\u91cf\uff0c\u9700\u8981\u4e3b\u52a8\u5f15\u5165\u3002 from flask import request @app.route('/login', methods=['GET', 'POST']) def login(): if request.method == 'POST': do_the_login() else: show_the_login_form() 2 \u5bf9 response \u5bf9\u8c61\u505a\u4e00\u4e9b\u5c01\u88c5\u4ee5\u65b9\u4fbf\u5e94\u7528\u7aef\u8fd4\u56de\u7ed3\u679c\uff0cWSGI \u670d\u52a1\u7aef\u8981\u6c42\u6bcf\u6b21\u8fd4\u56de\u7ed3\u679c\u65f6\u4e00\u5b9a\u8981\u8c03\u7528\u670d\u52a1\u7aef\u53d1\u6765\u7684 start_response \u5bf9\u8c61\u3002\u8fd9\u5f88\u9ebb\u70e6\uff0c\u6846\u67b6\u53ef\u4ee5\u5b9e\u73b0\u4e00\u4e9b\u5c01\u88c5\uff0c\u628a\u8fd9\u90e8\u5206\u903b\u8f91\u9690\u85cf\u6389\uff0c\u6bd4\u5982 flaks \u63d0\u4f9b\u4e86\u4e00\u4e2a Response \u5bf9\u8c61\u3002 def index(): response = Response(\"Unicorns are OK\") response.headers['X-Parachutes'] = 'parachutes are cool' response.set_cookie('username', 'the username') return response 3 \u63d0\u4f9b\u66f4\u65b9\u4fbf\u7684\u8def\u7531\u5904\u7406\u65b9\u6cd5\uff0c\u6846\u67b6\u9700\u8981\u5904\u7406\u6d4f\u89c8\u5668\u53d1\u6765\u7684\u67e5\u8be2\u53c2\u6570\uff0c\u6bd4\u5982 http://localhost:8080/orders?confirmed=true&processor=tony. \u6846\u67b6\u9700\u8981\u5f88\u65b9\u4fbf\u5730\u8ba9\u5e94\u7528\u5f00\u53d1\u8005\u67e5\u8be2\u7684\u5230 confirmed \u53c2\u6570\u548c processor \u53c2\u6570\u662f\u4ec0\u4e48\u3002 4 cookie\uff0csession \u5904\u7406\u80fd\u529b\u3002 5 \u67d0\u4e9b\u6846\u67b6\u8fd8\u63d0\u4f9b\u4e86 html template \u7684\u529f\u80fd\uff0c\u6bd4\u5982 flask \u91cc\u96c6\u6210\u7684 jinja\u3002\u5728\u524d\u540e\u5206\u79bb\u7684 web \u5f00\u53d1\u6d6a\u6f6e\u4e2d template \u4e0d\u662f\u540e\u7aef\u6846\u67b6\u5fc5\u987b\u63d0\u4f9b\u7684\u3002 6 \u8fd8\u53ef\u4ee5\u6dfb\u52a0 orm \u62bd\u8c61\u5c42\u53bb\u5904\u7406\u6570\u636e\u5e93\u589e\u5220\u6539\u67e5\uff0c\u6bd4\u5982 Django ORM\u3002","title":"\u6846\u67b6"},{"location":"wsgi/#_1","text":"\u6210\u719f\u7684 web \u6846\u67b6\u8fd8\u9700\u8981\u4e0b\u9762\u51e0\u90e8\u5206\u3002 1 \u5bf9 environ \u505a\u4e00\u4e9b\u9884\u5904\u7406\uff0c\u628a request \u66b4\u9732\u51fa\u6765\u4f9b\u5e94\u7528\u5f00\u53d1\u8005\u8c03\u7528\u3002\u5728\u4e00\u90e8\u5206 wsgi \u6846\u67b6\u4e2d request \u88ab\u76f4\u63a5\u6ce8\u5165\u5230\u8def\u7531\u51fd\u6570\u5f53\u4e2d\u3002 from django.http import HttpResponse def index(request): return HttpResponse(\"Hello, world.\") \u800c\u50cf flask \u548c bottle \u7c7b\u4f3c\u7684\u6846\u67b6\uff0crequest \u662f\u4e00\u4e2a\u7ebf\u7a0b\u5b89\u5168\u7684\u5168\u5c40\u53d8\u91cf\uff0c\u9700\u8981\u4e3b\u52a8\u5f15\u5165\u3002 from flask import request @app.route('/login', methods=['GET', 'POST']) def login(): if request.method == 'POST': do_the_login() else: show_the_login_form() 2 \u5bf9 response \u5bf9\u8c61\u505a\u4e00\u4e9b\u5c01\u88c5\u4ee5\u65b9\u4fbf\u5e94\u7528\u7aef\u8fd4\u56de\u7ed3\u679c\uff0cWSGI \u670d\u52a1\u7aef\u8981\u6c42\u6bcf\u6b21\u8fd4\u56de\u7ed3\u679c\u65f6\u4e00\u5b9a\u8981\u8c03\u7528\u670d\u52a1\u7aef\u53d1\u6765\u7684 start_response \u5bf9\u8c61\u3002\u8fd9\u5f88\u9ebb\u70e6\uff0c\u6846\u67b6\u53ef\u4ee5\u5b9e\u73b0\u4e00\u4e9b\u5c01\u88c5\uff0c\u628a\u8fd9\u90e8\u5206\u903b\u8f91\u9690\u85cf\u6389\uff0c\u6bd4\u5982 flaks \u63d0\u4f9b\u4e86\u4e00\u4e2a Response \u5bf9\u8c61\u3002 def index(): response = Response(\"Unicorns are OK\") response.headers['X-Parachutes'] = 'parachutes are cool' response.set_cookie('username', 'the username') return response 3 \u63d0\u4f9b\u66f4\u65b9\u4fbf\u7684\u8def\u7531\u5904\u7406\u65b9\u6cd5\uff0c\u6846\u67b6\u9700\u8981\u5904\u7406\u6d4f\u89c8\u5668\u53d1\u6765\u7684\u67e5\u8be2\u53c2\u6570\uff0c\u6bd4\u5982 http://localhost:8080/orders?confirmed=true&processor=tony. \u6846\u67b6\u9700\u8981\u5f88\u65b9\u4fbf\u5730\u8ba9\u5e94\u7528\u5f00\u53d1\u8005\u67e5\u8be2\u7684\u5230 confirmed \u53c2\u6570\u548c processor \u53c2\u6570\u662f\u4ec0\u4e48\u3002 4 cookie\uff0csession \u5904\u7406\u80fd\u529b\u3002 5 \u67d0\u4e9b\u6846\u67b6\u8fd8\u63d0\u4f9b\u4e86 html template \u7684\u529f\u80fd\uff0c\u6bd4\u5982 flask \u91cc\u96c6\u6210\u7684 jinja\u3002\u5728\u524d\u540e\u5206\u79bb\u7684 web \u5f00\u53d1\u6d6a\u6f6e\u4e2d template \u4e0d\u662f\u540e\u7aef\u6846\u67b6\u5fc5\u987b\u63d0\u4f9b\u7684\u3002 6 \u8fd8\u53ef\u4ee5\u6dfb\u52a0 orm \u62bd\u8c61\u5c42\u53bb\u5904\u7406\u6570\u636e\u5e93\u589e\u5220\u6539\u67e5\uff0c\u6bd4\u5982 Django ORM\u3002","title":"\u6846\u67b6"}]}